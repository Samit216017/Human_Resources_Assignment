				*********Matrix********
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Q1) 	Spiral traversal on a Matrix
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution 									//Leetcode
{
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) 
    {
        int r = matrix.size();
        int c = matrix[0].size();
        vector<int> v;
        int top = 0;                //1st row
        int bottom = r-1;           //last row
        int left = 0;               //1st coloum
        int right = c-1;            //last coloum
        
        while(top <= bottom && left <= right)
        {
            for(int i=left; i<=right; i++)
            {
                v.push_back(matrix[top][i]);
            }
            top++;
            
            for(int i=top; i<=bottom; i++)
            {
                v.push_back(matrix[i][right]);
            }
            right--;
            
            if(top <= bottom)
            {
                for(int i=right; i>=left; i--)
                {
                    v.push_back(matrix[bottom][i]);
                }
                bottom--;
            }
            
            if(left <= right)
            {
                for(int i=bottom; i>=top; i--)
                {
                    v.push_back(matrix[i][left]);
                }
                left++;
            }
        }
        return v;
    }
};
--------------------------------------------------------------------------------------------------------------
Q2) Search an element in a matriix
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution 							//Leetcode:- efficient
{
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int r = matrix.size();
        int c = matrix[0].size();
        int smallest = matrix[0][0];
        int largest = matrix[r-1][c-1];
        if(target < smallest || target > largest) return false;
        
        int i=0, j=c-1;
        while(i<r && j>=0)
        {
            if(matrix[i][j] == target) return true;
            
            else if(matrix[i][j] > target) j--;
            
            else i++;
        }
        return false;
    }
};
--------------------------------------------------------------------------------------------------------------
class Solution 							//Leetcode :- brute force
{
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int r = matrix.size();
        int c = matrix[0].size();
        int smallest = matrix[0][0];
        int largest = matrix[r-1][c-1];
        if(target < smallest || target > largest) return false;
        
        for(int i=0; i<r; i++)
        {
            for(int j=0; j<c; j++)
            {
                if(matrix[i][j] == target) return true;
            }
        }
        return false;
    }
};
--------------------------------------------------------------------------------------------------------------
Q3) 	Find median in a row wise sorted matrix
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution								//brute force
{   
public:
    int median(vector<vector<int>> &matrix, int r, int c)
    {
        vector<int> v;
        for(int i=0; i<r; i++)
        {
            for(int j=0; j<c; j++)
            {
                v.push_back(matrix[i][j]);
            }
        }
        sort(v.begin(), v.end());
        return v[(r*c)/2];
    }
};
--------------------------------------------------------------------------------------------------------------
class Solution									//efficient sol-1
{   
public:
    int median(vector<vector<int>> &mat, int r, int c)
    {
        typedef pair<int, pair<int, int>> ppi;
        priority_queue<ppi, vector<ppi>, greater<ppi>> pq;
        for(int i=0; i<r; i++)
        {
            pq.push({mat[i][0], {i,0}});
        }
        
        int need = (r*c+1)/2;
        for(int k=0; k<need-1; k++)
        {
            ppi x = pq.top();
            int i = x.second.first;
            int j = x.second.second;
            pq.pop();
            if(j+1 < c)
            {
                pq.push({mat[i][j+1], {i, j+1}});
            }
        }
        return pq.top().first;
    }
};
--------------------------------------------------------------------------------------------------------------
class Solution									//efficient sol-2
{   
public:
    int median(vector<vector<int>> &matrix, int r, int c)
    {
        int mn = INT_MAX;
        int mx = INT_MIN;
        for(int i=0; i<r; i++)
        {
            mn = min(mn, matrix[i][0]);
            mx = max(mx, matrix[i][c-1]);
        }
        
        int need = (r*c + 1)/2;
        while(mn < mx)
        {
            int mid = mn + (mx-mn)/2;
            int count = 0; 
            for(int i=0; i<r; i++)
            {
                count = count + upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            }
            
            if(count < need) mn = mid + 1;
            else mx = mid;
        }
        return mn;
    }
};
--------------------------------------------------------------------------------------------------------------
Q4) 	Find row with maximum no. of 1's
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution									//brute force
{
public:
	int rowWithMax1s(vector<vector<int>> arr, int r, int c) 
	{
	    int ans = -1;
	    int c1 = 0;
	    int c2 = 0;
	    for(int i=0; i<r; i++)
	    {
	        c2 = 0;
	        for(int j=0; j<c; j++)
	        {
	            if(arr[i][j] == 1) c2++;
	        }
	        
	        if(c2 > c1)
	        {
	            ans = i;
	            c1 = c2;
	        }
	    }
	    return ans;
	}
};
--------------------------------------------------------------------------------------------------------------
class Solution									//efficient sol
{
public:
	int rowWithMax1s(vector<vector<int>> mat, int R, int C) 
	{
        int j = C - 1;
        int ans = 0;
        
        for (int i=0; i<R; i++) 
        {
            bool flag = false; 
            while(j >= 0 && mat[i][j] == 1) 
            {
                j = j - 1;  
                flag = true; 
            }
            
            if(flag)
            {
                ans = i;           // Update max_row_index
            }
        }
        if(ans == 0 && mat[0][C-1] == 0)
            return -1;
        return ans;
	}
};
--------------------------------------------------------------------------------------------------------------
Q5) Print elements in sorted order using row-column wise sorted matrix
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution 									//brute force
{
  public:
    vector<vector<int>> sortedMatrix(int N, vector<vector<int>> Mat) 
    {
        vector<int> v;
        for(int i=0; i<N; i++)
        {
            for(int j=0; j<N; j++)
            {
                v.push_back(Mat[i][j]);
            }
        }
        
        sort(v.begin(), v.end());
        int k=0;
        
        for(int i=0; i<N; i++)
        {
            for(int j=0; j<N; j++)
            {
                Mat[i][j] = v[k];
                k++;
            }
        }
        
        return Mat;
    }
};
--------------------------------------------------------------------------------------------------------------
class Solution 									//efficient sol
{
  public:
    vector<vector<int>> sortedMatrix(int N, vector<vector<int>> Mat) 
    {
        priority_queue<int> pq;
        for(int i=0; i< N; i++)
        {
            for(int j=0; j<N; j++)
            {
                pq.push((-1) * Mat[i][j]);
            }
        }
        
        for(int i=0; i< N; i++)
        {
            for(int j=0; j<N; j++)
            {
                Mat[i][j] = (-1) * pq.top();
                pq.pop();
            }
        }
        
        return Mat;
    }
};
-------------------------------------------------------------------------------------------------------------
Q6) Maximum size rectangle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution 
{
    public: 
    int getMaxArea(int arr[], int n)                                //helper fun
    {
        int area = INT_MIN;
        stack<int> s1;
        vector<int> v1(n);
       
        // previous smaller
        for(int i=0; i<n; i++)
        {
            while(!s1.empty() && arr[s1.top()] >= arr[i])
            {
                s1.pop();
            }
            if(!s1.empty()) v1[i] = s1.top();
            else v1[i] = -1;
         
            s1.push(i);
        }
       
       
       
        // next smaller
        stack<int> s2;
        vector<int> v2(n);
        for(int i=n-1; i>=0; i--)
        {
            while(!s2.empty() && arr[s2.top()] >= arr[i])
            {
                s2.pop();
            }
            if(!s2.empty()) v2[i] = s2.top();
            else v2[i] = n;
          
            s2.push(i);
        }
       
        for(int i=0; i<n; i++)
        {
            int width = v2[i]-v1[i]-1;
            area = max(area, arr[i] * width);
        }
       
        return area;
     }
    
    int maxArea(int M[MAX][MAX], int n, int m)                              //main fun
    {
        int area = INT_MIN;                     //r = n & c = m
        int row[m];
        for(int i=0; i<n; i++)
        {
           if(i == 0)
           {
               for(int j=0; j<m; j++)
               {
                   row[j] = M[i][j];
               }
           }
           else
           {
               for(int j=0; j<m; j++)
               {
                   if(M[i][j] == 0) row[j]=0;
                   else row[j] = row[j] + M[i][j];
               }
           }
       
           int curr_area = getMaxArea(row, m);
           if(curr_area > area)
               area = curr_area;
        }
        return area;
    }
};
-------------------------------------------------------------------------------------------------------------
Q7) Find a specific pair in Matrix
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#include <bits/stdc++.h>					//brute force
using namespace std;
#define N 5

int findMaxValue(int mat[][N])
{
	int maxValue = INT_MIN;

	for(int a=0; a<N-1; a++)
	for(int b=0; b<N-1; b++)
		for(int d=a+1; d<N; d++)
		for(int e=b+1; e<N; e++)
			if(maxValue < (mat[d][e] - mat[a][b])) maxValue = mat[d][e] - mat[a][b];

	return maxValue;
}

int main()
{
	int mat[N][N] = {{  1,   2, -1, -4, -20 },
			 { -8,  -3,  4,  2,  1 },
			 {  3,   8,  6,  1,  3 },
			 { -4,  -1,  1,  7, -6 },
			 {  0,  -4, 10, -5,  1 } };
				 
	cout << "Maximum Value is " << findMaxValue(mat);

	return 0;
}
-------------------------------------------------------------------------------------------------------------
int findMaxValue(vector<vector<int>> &mat, int N) 			//coding ninjas (efficient sol)
{
    int maxValue = INT_MIN;
    int maxArr[N][N];

    maxArr[N-1][N-1] = mat[N-1][N-1];        //last element of maxArr will be same's as of the input matrix

    int maxv = mat[N-1][N-1];                // preprocess last row
    for(int j=N-2; j>=0; j--)
    {
        if(mat[N-1][j] > maxv) maxv = mat[N-1][j];
        maxArr[N-1][j] = maxv;
    }


    maxv = mat[N-1][N-1];                   // preprocess last column
    for(int i=N-2; i>=0; i--)
    {
        if(mat[i][N-1] > maxv) maxv = mat[i][N-1];
        maxArr[i][N-1] = maxv;
    }

    for(int i=N-2; i>=0; i--)               // preprocess rest of the matrix from bottom
    {
        for(int j=N-2; j>=0; j--)
        {
            // Update maxValue
            if(maxArr[i+1][j+1] - mat[i][j] > maxValue)
                maxValue = maxArr[i+1][j+1] - mat[i][j];

            // set maxArr (i, j)
            maxArr[i][j] = max(mat[i][j], max(maxArr[i][j + 1], maxArr[i + 1][j]) );
        }
    }

    return maxValue;
}
-------------------------------------------------------------------------------------------------------------
Q8) Rotate matrix by 90 degrees
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
class Solution 
{
public:
    void rotate(vector<vector<int>>& arr) 
    {
        int N = arr.size();
        
        // First rotation with respect to main diagonal
        for(int i = 0; i < N; ++i)                          
        {
            for(int j = 0; j < i; ++j)
            {
                swap(arr[i][j], arr[j][i]);
            }
        }
     
        // Second rotation with respect to middle column
        for(int i = 0; i < N; ++i)
        {
            for(int j = 0; j < N / 2; ++j)
            {
                swap(arr[i][j], arr[i][N - j - 1]);
            }
        }
    }
};
-------------------------------------------------------------------------------------------------------------
class Solution 
{
public:
    void rotate(vector<vector<int>>& arr) 
    {
        int N = arr.size();
        
        // First rotation with respect to secondary diagonal
        for(int i = 0; i < N; ++i)                          
        {
            for(int j = 0; j < N-i; ++j)
            {
                swap(arr[i][j], arr[N-1-j][N-1-i]);
            }
        }
     
        // Second rotation with respect to middle row
        for(int i = 0; i < N/2; ++i)
        {
            for(int j = 0; j < N; ++j)
            {
                swap(arr[i][j], arr[N-1-i][j]);
            }
        }
    }
};
-------------------------------------------------------------------------------------------------------------
Q9) Kth smallest element in a row-column wise sorted matrix
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
int kthSmallest(int mat[MAX][MAX], int n, int k)				//brute force
{
  vector<int> v;
  for(int i=0; i<n; i++)
  {
      for(int j=0; j<n; j++)
      {
          v.push_back(mat[i][j]);
      }
  }
  sort(v.begin(), v.end());
  return v[k-1];
}
-------------------------------------------------------------------------------------------------------------
int kthSmallest(int mat[MAX][MAX], int n, int k)		//efficient:-BST {not working for leetcode}
{
   int l=0, r=10000;
   while(l<r)
   {
       int mid = (l+r)/2;
       int count = 0;
       for(int i=0; i<n; i++)
       {
           count = count + (upper_bound(mat[i], mat[i]+n, mid) - mat[i]);
       }
       
       if(count < k) l = mid+1;
       else r = mid;
   }
   return l;
}
-------------------------------------------------------------------------------------------------------------
class Solution 									//efficient:- max_heap
{
public:
    int kthSmallest(vector<vector<int>>& mat, int k) 
    {
        int n = mat.size();
        priority_queue<int> pq;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                pq.push(mat[i][j]);
           
                /*if(pq.top() < mat[i][j])
                {
                    i++;
                    j = 0;
                }*/
           
                if(pq.size() > k)pq.pop();
            }
        }
        return pq.top();
    }
};
-------------------------------------------------------------------------------------------------------------
Q10) Common elements in all rows of a given matrix
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#include <bits/stdc++.h>
using namespace std;

#define M 4
#define N 5

void printCommonElements(int mat[M][N])
{
	unordered_map<int, int> mp;

	for(int j=0; j<N; j++)                             // initialize 1st row elements with value 1
		mp[mat[0][j]] = 1;

	for(int i=1; i<M; i++)
	{
		for (int j=0; j<N; j++)
		{
			// If element is present in the map and is not duplicated in current row.
			if(mp[mat[i][j]] == i)
			{
				mp[mat[i][j]] = i + 1;                     // we increment count of the element in map by 1

				if (i==M-1 && mp[mat[i][j]]==M)            // If this is last row
				cout << mat[i][j] << " ";
			}
		}
	}
}

int main()
{
	int mat[M][N] =
	{
		{1, 2, 1, 4, 8},
		{3, 7, 8, 5, 1},
		{8, 7, 7, 3, 1},
		{8, 1, 2, 7, 9},
	};

	printCommonElements(mat);
    	return 0;
}
-------------------------------------------------------------------------------------------------------------
Q11) Common elements from 3 arrays in sorted order
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
{
           //code here.
           int i=0 ,j=0, k=0;
           vector<int> v;
           set<int> s;
           while(i<n1 && j<n2 && k<n3)
           {
               if(A[i]==B[j] && B[j]==C[k])
               {
                   //v.push_back(A[i]);
                   s.insert(A[i]);
                   i++;
                   j++;
                   k++;
               }
               else
               {
                   if(A[i] < B[j]) i++;
                   else if(B[j] < C[k]) j++;
                   else k++;
               }
           }
           for(int i:s)
           {
               v.push_back(i);
           }
           return v;
}
-------------------------------------------------------------------------------------------------------------